Product Requirements Document: Iterative Trading Strategy Discovery Tool
Version: 1.0
Date: 2025-04-30
Author: Gemini 2.5 Pro (acting as Senior Product Manager)
Status: Draft

1. Introduction

This document outlines the product requirements for the "Iterative Trading Strategy Discovery Tool". This tool is a Python script designed for individual traders and analysts to systematically discover potentially viable short-to-medium term (1-2 month holding period) swing trading strategies for a user-specified stock ticker. The core objective is to identify a simple, rule-based strategy using common technical indicators (sourced via yfinance daily data) that historically demonstrates an average return exceeding a defined threshold (e.g., >3%) with reasonable consistency across forward walk testing periods. The tool employs an iterative refinement process, starting with a basic strategy (Moving Average Crossover) and progressively adding complexity (parameter tuning, filters, complementary indicators, timeframe aggregation) only if the simpler strategy fails to meet the performance target. This approach mirrors the pragmatic methodology of experienced technical traders who refine systems based on evidence and market observation.

2. Goals

P0 (Must Have): Develop a Python script that automates the discovery and forward walk testing of simple technical trading strategies for a single stock ticker.
P0 (Must Have): Identify a specific strategy (rules, parameters, timeframe) that achieves an average return > target_return_pct (config) per trade over a min/max_holding_days (config) period, demonstrating consistency across walk-forward test segments.
P1 (Should Have): Provide clear, quantitative performance reporting for tested strategies (Avg Return, Win Rate, Avg Hold Days, Consistency Score, Profit Factor, Max Drawdown).
P1 (Should Have): Implement an iterative logic that starts simple and adds complexity layers (tuning, filters, indicators, timeframes) systematically only when performance targets are not met.
P2 (Could Have): Offer optional detailed logging of individual trades and per-period performance for deeper analysis.
3. Feature Definition & Prioritization (Kano Model)

Feature ID	Feature Description	User Need Addressed	Kano Category	Priority
F01	Configuration File Loading	User control over ticker, dates, targets, parameters	Basic	P0
F02	yfinance Data Acquisition & Prep (Daily)	Access to necessary historical market data	Basic	P0
F03	Base Strategy Implementation (MA Crossover)	Starting point for iterative discovery	Basic	P0
F04	Forward Walk Testing (FWT) Engine	Robust backtesting methodology, avoids overfitting	Basic	P0
F05	Core Performance Metrics Calculation	Quantify strategy effectiveness (return, win rate etc.)	Basic	P0
F06	Iterative Logic - Parameter Tuning (Level 1)	Refine base strategy parameters	Performance	P0
F07	Iterative Logic - Filter Addition (Level 2: Vol, RSI, ADX)	Improve signal quality by adding confirmation	Performance	P1
F08	Iterative Logic - Indicator Addition (Level 3: MACD, BB)	Seek confluence from complementary tools	Performance	P1
F09	Iterative Logic - Timeframe Aggregation (Level 4: 3D, W)	Reduce noise, test pattern on different scales	Performance	P1
F10	Final Results Reporting (Success / Best Attempt)	Clear communication of findings to the user	Basic	P0
F11	Transaction Cost Simulation	More realistic return calculation	Performance	P1
F12	Detailed Trade/Period Logging (Optional)	Enable deeper user analysis	Excitement	P2
4. Functional & Non-Functional Requirements

4.1. Functional Requirements

FR-F01 (Config Loading):
The script MUST read parameters from an external file (config.ini or config.yaml).
MUST support keys: ticker, start_date, end_date, target_return_pct, min_holding_days, max_holding_days, walk_forward_train_years, walk_forward_test_months, transaction_cost_pct, initial_ma_short, initial_ma_long.
MUST handle missing or invalid config values gracefully (e.g., default values or error messages).
FR-F02 (Data Handling):
MUST fetch daily ('1d') OHLCV data using yfinance for the specified ticker and date range.
MUST handle potential yfinance errors (e.g., invalid ticker, connection issues).
MUST implement a strategy for handling missing data points (e.g., forward fill).
MUST support resampling daily data into 3-day and Weekly bars for Level 4 iteration.
FR-F03 (Base Strategy):
MUST implement Moving Average (both EMA and SMA selectable/testable) crossover logic.
Entry signal: Short MA crosses above Long MA.
Exit signal: Short MA crosses below Long MA OR max_holding_days reached.
FR-F04 (FWT Engine):
MUST implement a walk-forward testing framework based on walk_forward_train_years and walk_forward_test_months.
MUST ensure no lookahead bias (decisions based only on data available up to that point).
MUST simulate trades entering on the day after the signal (e.g., Open price).
MUST apply transaction_cost_pct on both entry and exit.
FR-F05 (Performance Metrics):
MUST calculate and store for each FWT test period and overall: Average Return per Trade (%), Win Rate (%), Average Holding Period (days), Profit Factor, Maximum Drawdown (%).
MUST calculate a Consistency Score (e.g., percentage of FWT periods meeting target_return_pct and holding period criteria).
FR-F06 to FR-F09 (Iteration Logic):
MUST execute strategies in a defined sequence: Level 0 (Base MA) -> Level 1 (Tune MA Params) -> Level 2 (Add Single Filters: Volume MA, RSI>50, ADX>20/25) -> Level 3 (Add/Combine: MACD cross, Bollinger Band interaction) -> Level 4 (Aggregate Timeframes: 3D, Weekly).
MUST proceed to the next level ONLY if the current level fails to meet the target return and consistency criteria.
MUST systematically explore parameters/filters within each level (e.g., test multiple common MA pairs, test each filter individually before combining).
MUST stop iteration and report success if criteria are met at any level.
MUST calculate required indicators (SMA, EMA, Volume MA, RSI, ADX, MACD, Bollinger Bands) accurately.
FR-F10 (Reporting):
If successful, MUST output the strategy level, specific parameters (MA periods, filter settings, timeframe), and overall performance metrics.
If unsuccessful, MUST output the best-performing strategy found across all levels, its parameters/metrics, and state that the target was not met.
FR-F11 (Transaction Costs):
MUST deduct transaction_cost_pct from the return of each simulated trade (entry and exit).
FR-F12 (Logging):
SHOULD provide an option (e.g., config flag) to save a detailed log of each simulated trade (Entry Date/Price, Exit Date/Price, Return, Holding Days) to a CSV file.
SHOULD provide an option to save performance summaries for each FWT period.
4.2. Non-Functional Requirements

NFR-Performance:
The script should complete execution for a 5-10 year dataset within a reasonable timeframe (target: < 10 minutes) on standard hardware.
Indicator and backtesting calculations must be accurate.
NFR-Reliability:
The script must handle common errors gracefully (e.g., invalid ticker, data unavailable, division by zero in metrics) and provide informative error messages.
FWT implementation must be robust against lookahead bias.
NFR-Usability:
Configuration via the external file must be simple and intuitive.
The script must be executable from the command line with a single command.
The final report output must be clear, concise, and easily understandable.
NFR-Maintainability:
Code MUST adhere to PEP 8 style guidelines.
Code MUST be modular (e.g., separate modules/functions for data handling, indicators, strategy logic, backtesting, reporting).
Code SHOULD be well-commented, especially complex logic sections (FWT, iteration).
NFR-Security:
Not applicable (local script, no sensitive data handling, no external APIs beyond yfinance).
NFR-Scalability:
While designed for a single ticker, the code structure SHOULD allow for relatively easy addition of new indicators or strategy levels in the future.
5. User Workflows & Journeys (User Story Mapping)

Primary User: Retail Trader / Technical Analyst

Goal: Find a potentially profitable (>3% return, 1-2 month hold), consistent trading strategy for a specific stock using simple technical rules.

User Journey:

Setup:
User opens the config.ini file.
User inputs desired ticker, start_date, end_date.
User confirms/adjusts target_return_pct, min/max_holding_days, FWT settings, transaction_cost_pct.
User saves the config.ini file.
Execution:
User opens a terminal/command prompt.
User navigates to the script directory.
User runs the script (e.g., python strategy_finder.py).
Processing (System - Automated):
Script loads configuration.
Script fetches and prepares data via yfinance. (Potential Friction: Ticker not found, data gaps)
Script executes FWT for Level 0 (Base MA Crossover).
Script evaluates Level 0 performance.
IF criteria met, jumps to Reporting.
ELSE Script iterates through Levels 1-4 sequentially:
Applies next complexity layer (tuning, filters, indicators, timeframes).
Runs FWT for the modified strategy.
Evaluates performance.
IF criteria met, stops iteration and jumps to Reporting.
(Potential Friction: Long execution time if many iterations run)
Reporting:
Script prints the final report to the console.
Report clearly indicates if a strategy met the criteria or shows the best attempt.
Report details the strategy parameters and key performance metrics. (Potential Friction: Report unclear if no strategy works well)
Analysis (User):
User reads and interprets the report.
(Optional) User opens the detailed log files (if enabled) for further investigation.
User decides whether to investigate the reported strategy further (e.g., manual chart review, paper trading).
6. Technical Feasibility & Architecture

Feasibility: High. Relies on standard, well-documented Python libraries (pandas, numpy, yfinance). The logic is rule-based and computationally manageable for single-ticker daily data over typical historical periods.
Proposed Architecture: Monolithic Python Script with Modular Design.
mermaid
Copy Code
graph LR
    A[main.py] --> B(config_loader.py);
    A --> C(data_handler.py);
    A --> D(iteration_manager.py);
    A --> E(reporter.py);

    C --> F(yfinance_API);
    C --> G(indicator_calculator.py);

    D --> G;
    D --> H(strategy_logic.py);
    D --> I(backtester.py);

    I --> G;
    I --> H;
    I --> J(performance_calculator.py);

    E --> J;
    E --> K(logger.py);

    subgraph Core Logic
        G; H; I; J;
    end

    subgraph IO & Control
        A; B; C; D; E; K;
    end

    subgraph External
        F;
    end

    style F fill:#f9f,stroke:#333,stroke-width:2px
Components:
main.py: Orchestrator.
config_loader.py: Handles reading .ini/.yaml config.
data_handler.py: Fetches (yfinance), cleans, prepares, resamples (pandas) data.
indicator_calculator.py: Functions for all technical indicators (pandas).
strategy_logic.py: Defines entry/exit rules for each strategy level.
backtester.py: Implements FWT, simulates trades, applies costs (pandas, numpy).
performance_calculator.py: Calculates metrics (Avg Return, Win Rate, etc.).
iteration_manager.py: Controls the Level 0 -> Level 4 progression based on performance.
reporter.py: Formats and outputs the final summary.
logger.py (Optional): Handles writing detailed logs to files.
Technical Constraints/Dependencies: Python 3.7+, pandas, numpy, yfinance. Internet connection required for yfinance.
7. Acceptance Criteria (Gherkin Syntax Examples)

Feature: F03/F04/F05 - Base Strategy FWT & Evaluation
Given a valid configuration with ticker="AAPL", start_date="2018-01-01", end_date="2023-12-31", initial_ma_short=9, initial_ma_long=21
And yfinance data for AAPL is available for the period
When the script executes the Level 0 (Base MA Crossover) strategy using Forward Walk Testing
Then the system must calculate performance metrics (including Avg Return, Win Rate, Avg Hold Days, Consistency Score) based only on the FWT results for the EMA 9/21 strategy.
And the results should reflect the application of transaction_cost_pct.
Feature: F06-F09 - Iteration Logic Trigger
Given the FWT results for the current strategy level (e.g., Level 1 - Tuned MA Params)
And the calculated Consistency Score is below the required threshold (e.g., < 70%) OR the overall Average Return is below target_return_pct
When the iteration_manager evaluates the performance
Then the script must proceed to test the next defined strategy level (e.g., Level 2 - Add Single Filters).
Feature: F10 - Successful Strategy Reporting
Given a strategy variation (e.g., Level 2: EMA 20/50 Crossover + RSI(14) > 55 Filter on Daily bars) successfully meets the target_return_pct and consistency criteria during FWT
When the script completes all necessary iterations
Then the final console output MUST clearly state:
"Successful Strategy Found!"
Strategy Level: Level 2
Parameters: EMA(20)/EMA(50) Crossover, RSI(14) > 55 Filter
Timeframe: Daily
Key Metrics: [Display calculated Avg Return, Win Rate, Avg Hold Days, Consistency Score, Profit Factor, Max Drawdown]
Feature: F10 - Unsuccessful Strategy Reporting
Given no strategy variation met the target criteria after testing all levels (0 through 4)
And the best-performing variation found was Level 1: SMA 10/30 Crossover with specific metrics [Metrics A]
When the script completes all iterations
Then the final console output MUST clearly state:
"Target criteria not met by any tested strategy."
Best Attempt: Level 1 - SMA(10)/SMA(30) Crossover
Timeframe: Daily
Key Metrics: [Display Metrics A]
8. Release Strategy & Timeline (Incremental Roadmap)

This project will be developed as a single script, but progress can be tracked via internal milestones.

Milestone 1: Core Backtest Engine (Target: ~1-2 Weeks)
Features: F01, F02, F03, F04, F05, F11 (partial - basic MA crossover FWT).
Goal: Establish a working FWT engine for the base MA strategy, calculate basic metrics, handle config and data.
Milestone 2: Basic Iteration & Filters (Target: ~2 Weeks)
Features: F06, F07, F10 (basic reporting).
Goal: Implement Level 1 (Parameter Tuning) and Level 2 (Single Filters) iteration logic. Refine reporting.
Milestone 3: Advanced Iteration & Timeframes (Target: ~2 Weeks)
Features: F08, F09.
Goal: Implement Level 3 (Indicators) and Level 4 (Timeframes). Complete the full iteration sequence.
Milestone 4: Finalization & Logging (Target: ~1-2 Weeks)
Features: F12 (Optional Logging), Finalize F10 (Reporting), Comprehensive Testing, Documentation, Code Cleanup (NFRs).
Goal: Deliver a robust, well-documented, and tested script meeting all P0/P1 requirements.
Total Estimated Timeline: 6-8 Weeks (subject to resource allocation and complexity encountered).

9. Risk Management & Assumptions (RAID Log)

Category	ID	Description	Impact	Likelihood	Mitigation Strategy	Owner	Status
Risk	R01	yfinance API changes break data fetching or introduce inaccuracies.	High	Medium	Lock yfinance version. Implement error handling for API calls. Monitor library updates.	Dev Team	Open
Risk	R02	Poor data quality from Yahoo Finance (gaps, outliers) skews backtest results.	Medium	Medium	Implement robust NaN handling (e.g., ffill). Potentially flag/report periods with high % of missing data.	Dev Team	Open
Risk	R03	Backtest overfitting: Strategy works historically but fails live.	High	High	Use Forward Walk Testing (implemented). Clearly state in docs/report that past performance is not guaranteed.	PM / Dev	Open
Risk	R04	Target performance (>3% / 1-2mo) is unachievable with simple strategies for the chosen ticker/market regime.	Medium	Medium	Manage expectations via reporting (show "best attempt"). Allow user configuration of targets.	PM	Open
Risk	R05	Script execution time becomes excessively long for large date ranges or complex iterations.	Low	Medium	Optimize pandas operations. Profile code. Consider adding config options to skip certain iteration levels.	Dev Team	Open
Assumption	A01	yfinance daily data is sufficiently accurate for strategy evaluation.	-	-	Accepted assumption for this tool's scope.	PM	Open
Assumption	A02	A fixed percentage transaction_cost_pct is an acceptable approximation for slippage/commissions.	-	-	Accepted simplification.	PM	Open
Assumption	A03	The defined iterative progression (Levels 0-4) is a logical approach for discovering simple strategies.	-	-	Based on common technical analysis practices.	PM	Open
Issue	I01	[Placeholder for issues identified during development]	-	-	-	-	-
Dependency	D01	Stable internet connection for yfinance data fetching.	-	-	User responsibility. Script should handle connection errors.	User / Dev	Open
Dependency	D02	User environment has Python 3.7+ and required libraries (pandas, numpy, yfinance) installed.	-	-	Document prerequisites clearly.	PM / Dev	Open
10. Future Considerations (Out of Scope for v1.0)

Multi-ticker analysis and portfolio construction.
Integration of more advanced indicators or custom indicator definitions.
Inclusion of fundamental data or sentiment analysis.
Dynamic stop-loss or take-profit mechanisms beyond max holding period.
Parameter optimization within FWT training periods (e.g., grid search).
Graphical output (e.g., equity curves, trade visualizations).
Integration with brokerage APIs for paper/live trading.